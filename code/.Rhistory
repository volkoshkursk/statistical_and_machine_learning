knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(MASS)
library(candisc)
library(klaR)
library(FSA)
library(ROCR)
library("PerformanceAnalytics")
library("FactoMineR")
library("factoextra")
df_raw <- read.csv("winequality-white.csv", sep = ";")
head(df_raw)
length(df_raw[, 1])
count(df_raw, quality)
perc_class <- count(df_raw, quality)
perc_class$n <- count(df_raw, quality)$n / sum(count(df_raw, quality)$n)
perc_class
df <- df_raw %>% filter(quality > 4, quality < 8)
df_low <- df_raw %>% filter(quality < 5)
df_low$quality <- 5
df_high <- df_raw %>% filter(quality > 7)
df_high$quality <- 7
df <- rbind(df, df_low, df_high)
df$quality <- cut(df$quality, 3, labels=c('1', '2', '3'))
chart.Correlation(subset(df, select=-c(quality)), histogram=TRUE)
df_l <- df
df_l <- transform(df_l, residual.sugar=log(residual.sugar))
df_l <- transform(df_l, chlorides=log(chlorides))
df_l <- transform(df_l, citric.acid=log(citric.acid))
df_l <- transform(df_l, volatile.acidity=log(volatile.acidity))
df_l <- transform(df_l, free.sulfur.dioxide=log(free.sulfur.dioxide))
df_l <- transform(df_l, sulphates=log(sulphates))
df_l <- transform(df_l, density=log(density))
chart.Correlation(subset(df_l, select=-c(quality)), histogram=TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(MASS)
library(candisc)
library(klaR)
library(FSA)
library(ROCR)
library("PerformanceAnalytics")
library("FactoMineR")
library("factoextra")
df_raw <- read.csv("winequality-white.csv", sep = ";")
head(df_raw)
length(df_raw[, 1])
count(df_raw, quality)
perc_class <- count(df_raw, quality)
perc_class$n <- count(df_raw, quality)$n / sum(count(df_raw, quality)$n)
perc_class
df <- df_raw %>% filter(quality > 4, quality < 8)
df_low <- df_raw %>% filter(quality < 5)
df_low$quality <- 5
df_high <- df_raw %>% filter(quality > 7)
df_high$quality <- 7
df <- rbind(df, df_low, df_high)
df$quality <- cut(df$quality, 3, labels=c('1', '2', '3'))
chart.Correlation(subset(df, select=-c(quality)), histogram=TRUE)
df_l <- df
df_l <- transform(df_l, residual.sugar=log(residual.sugar))
df_l <- transform(df_l, chlorides=log(chlorides))
df_l <- transform(df_l, citric.acid=log(citric.acid))
df_l <- transform(df_l, volatile.acidity=log(volatile.acidity))
df_l <- transform(df_l, free.sulfur.dioxide=log(free.sulfur.dioxide))
df_l <- transform(df_l, sulphates=log(sulphates))
df_l <- transform(df_l, density=log(density))
chart.Correlation(subset(df_l, select=-c(quality)), histogram=TRUE)
df_l <- df_l %>% filter(!is.infinite(citric.acid))
smp_size <- floor(0.75 * nrow(df))
set.seed(123)
train_ind <- sample(seq_len(nrow(df_l)), size = smp_size)
train <- df_l[train_ind, ]
test <- df_l[-train_ind, ]
rownames(train) = 1:length(train[, 1])
rownames(test) = 1:length(test[, 3])
count(train, quality)
count(test, quality)
perc_class <- count(train, quality)
perc_class$n <- count(train, quality)$n / sum(count(train, quality)$n)
perc_class
perc_class <- count(test, quality)
perc_class$n <- count(test, quality)$n / sum(count(test, quality)$n)
perc_class
train.manova <- manova(cbind(fixed.acidity, volatile.acidity, citric.acid, residual.sugar, chlorides, free.sulfur.dioxide, total.sulfur.dioxide, density, pH, sulphates, alcohol) ~ quality, data = train)
summary(train.manova, 'Wilks')
summary(train.manova, 'Roy')
ggplot(df_l) +
geom_point(aes(x = pH, y = alcohol, group = quality, color = quality)) +
stat_ellipse(aes(x = pH, y = alcohol, group = quality, color = quality)) +
scale_color_manual(values = c("red", "purple", "black"))
ggplot(df_l) +
geom_point(aes(x = fixed.acidity, y = volatile.acidity, group = quality, color = quality)) +
stat_ellipse(aes(x = fixed.acidity, y = volatile.acidity, group = quality, color = quality)) +
scale_color_manual(values = c("red", "purple", "black"))
full.lda <- lda(x=train[, 1:11], grouping = train[, 12])
full.ldap <- predict(full.lda, train[, 1:11])
full.ldapc <- full.ldap$class
ct <- table(full.ldapc, train[, 12])
ct
diag(prop.table(ct, 2))
full.lda <- lda(x=train[, 1:11], grouping = train[, 12], prior = c(1, 1, 1)/3)
full.ldap <- predict(full.lda, train[, 1:11])
full.ldapc <- full.ldap$class
ct <- table(full.ldapc, train[, 12])
ct
diag(prop.table(ct, 2))
train.lda <- lda(train[, 1:11], train[, 12], prior = c(1, 1, 1)/3)
train.ldap <- predict(train.lda, test[, 1:11])
train.ldapc <- train.ldap$class
ct <- table(train.ldapc, test[,12])
ct
diag(prop.table(ct, 2))
cv.lda <- lda(df_l[, 1:11], df_l[, 12], CV = TRUE, prior = c(1, 1, 1)/3)
cv.ldac <- cv.lda$class
ct <- table(cv.ldac, df_l[,12])
ct
diag(prop.table(ct, 2))
result.candisc <- candisc(train.manova)
ggplot(result.candisc$scores) +
geom_point(aes(x = Can1, y = Can2, color = quality)) +
stat_ellipse(aes(x = Can1, y = Can2, color = quality)) +
geom_segment(as.data.frame(result.candisc$structure),
mapping = aes(x = 0, y = 0, xend = 6.5 * Can1, yend = 6.5 * Can2),
arrow = arrow(angle = 10, type = "closed"), size = 0.5)
plot(partimat(quality ~ ., train, method="lda"), xlim = c(-10, 10),
ylim = c(-10, 10));
# Подготовка данных
two.df = Subset(df_l, quality != 3)
two.lda <- lda(two.df[, 1:11], grouping = two.df[, 12], prior=c(1,1)/2)
two.ldap <- predict(two.lda, two.df[, 1:11])
# Переводит данные в стандартизированный формат. Первый параметр - предсказания, второй - настоящая классификация.
preds <- prediction(two.ldap$posterior[,2], two.df[, 12])
# Строим ROC-кривую и рисуем ее
perf <- performance(preds, "tpr", "fpr")
plot(perf, colorize = TRUE)
#Считаем AUC
AUC.ROCR <- performance(preds, "auc")
# Добавляем прямую
abline(a = 0, b = 1)
# Добавляем значение AUC на график
text(x = .25, y = .65, paste("AUC = ", round(AUC.ROCR@y.values[[1]],5)))
# Подготовка данных
two.df = Subset(df_l, quality != 1)
two.lda <- lda(two.df[, 1:11], grouping = two.df[, 12], prior=c(1,1)/2)
two.ldap <- predict(two.lda, two.df[, 1:11])
# Переводит данные в стандартизированный формат. Первый параметр - предсказания, второй - настоящая классификация.
preds <- prediction(two.ldap$posterior[,2], two.df[, 12])
# Строим ROC-кривую и рисуем ее
perf <- performance(preds, "tpr", "fpr")
plot(perf, colorize = TRUE)
#Считаем AUC
AUC.ROCR <- performance(preds, "auc")
# Добавляем прямую
abline(a = 0, b = 1)
# Добавляем значение AUC на график
text(x = .25, y = .65, paste("AUC = ", round(AUC.ROCR@y.values[[1]],5)))
# Подготовка данных
two.df = Subset(df_l, quality != 2)
two.lda <- lda(two.df[, 1:11], grouping = two.df[, 12], prior=c(1,1)/2)
two.ldap <- predict(two.lda, two.df[, 1:11])
# Переводит данные в стандартизированный формат. Первый параметр - предсказания, второй - настоящая классификация.
preds <- prediction(two.ldap$posterior[,2], two.df[, 12])
# Строим ROC-кривую и рисуем ее
perf <- performance(preds, "tpr", "fpr")
plot(perf, colorize = TRUE)
#Считаем AUC
AUC.ROCR <- performance(preds, "auc")
# Добавляем прямую
abline(a = 0, b = 1)
# Добавляем значение AUC на график
text(x = .25, y = .65, paste("AUC = ", round(AUC.ROCR@y.values[[1]],5)))
full.qda <- qda(x=train[, 1:11], grouping = train[, 12])
full.qdap <- predict(full.qda, train[, 1:11])
full.qdapc <- full.qdap$class
ct <- table(full.qdapc, train[, 12])
ct
diag(prop.table(ct, 2))
full.qda <- qda(x=df_l[, 1:11], grouping = df_l[, 12], prior = c(1, 1, 1)/3)
full.qdap <- predict(full.qda, df_l[, 1:11])
full.qdapc <- full.qdap$class
ct <- table(full.qdapc, df_l[, 12])
ct
diag(prop.table(ct, 2))
train.qda <- qda(train[, 1:11], train[, 12], prior = c(1, 1, 1)/3)
train.qdap <- predict(train.qda, test[, 1:11])
train.qdapc <- train.qdap$class
ct <- table(train.qdapc, test[,12])
ct
diag(prop.table(ct, 2))
cv.qda <- qda(df_l[, 1:11], df_l[, 12], CV = TRUE, prior = c(1, 1, 1)/3)
cv.qdac <- cv.qda$class
ct <- table(cv.qdac, df_l[,12])
ct
diag(prop.table(ct, 2))
plot(partimat(quality ~ ., df_l, method="qda"), xlim = c(-5, 5), ylim = c(-5, 5))
# Подготовка данных
two.df = Subset(df_l, quality != 3)
two.qda <- qda(two.df[, 1:11], grouping = two.df[, 12], prior=c(1,1)/2)
two.qdap <- predict(two.qda, two.df[, 1:11])
# Переводит данные в стандартизированный формат. Первый параметр - предсказания, второй - настоящая классификация.
preds <- prediction(two.qdap$posterior[,2], two.df[, 12])
# Строим ROC-кривую и рисуем ее
perf <- performance(preds, "tpr", "fpr")
plot(perf, colorize = TRUE)
#Считаем AUC
AUC.ROCR <- performance(preds, "auc")
# Добавляем прямую
abline(a = 0, b = 1)
# Добавляем значение AUC на график
text(x = .25, y = .65, paste("AUC = ", round(AUC.ROCR@y.values[[1]],5)))
# two.df = Subset(df_l, quality != 3)
# two.cv.qda <- qda(two.df[, 1:11], two.df[, 12], CV = T, prior=c(1,1)/2)
# predcv <- prediction(two.cv.qda$posterior[,2], two.df[, 12])
# perfcv <- performance(predcv, "tpr", "fpr")
# plot(perfcv, colorize = TRUE)
# AUCcv <- performance(predcv, "auc")
# abline(a = 0, b = 1)
# text(x = .25, y = .65, paste("AUC = ", round(AUCcv@y.values[[1]],5)))
# Подготовка данных
two.df = Subset(df_l, quality != 1)
two.qda <- qda(two.df[, 1:11], grouping = two.df[, 12], prior=c(1,1)/2)
two.qdap <- predict(two.qda, two.df[, 1:11])
# Переводит данные в стандартизированный формат. Первый параметр - предсказания, второй - настоящая классификация.
preds <- prediction(two.qdap$posterior[,2], two.df[, 12])
# Строим ROC-кривую и рисуем ее
perf <- performance(preds, "tpr", "fpr")
plot(perf, colorize = TRUE)
#Считаем AUC
AUC.ROCR <- performance(preds, "auc")
# Добавляем прямую
abline(a = 0, b = 1)
# Добавляем значение AUC на график
text(x = .25, y = .65, paste("AUC = ", round(AUC.ROCR@y.values[[1]],5)))
# two.df = Subset(df_l, quality != 1)
# two.cv.qda <- qda(two.df[, 1:11], two.df[, 12], CV = T, prior=c(1,1)/2)
# predcv <- prediction(two.cv.qda$posterior[,2], two.df[, 12])
# perfcv <- performance(predcv, "tpr", "fpr")
# plot(perfcv, colorize = TRUE)
# AUCcv <- performance(predcv, "auc")
# abline(a = 0, b = 1)
# text(x = .25, y = .65, paste("AUC = ", round(AUCcv@y.values[[1]],5)))
# Подготовка данных
two.df = Subset(df_l, quality != 2)
two.qda <- qda(two.df[, 1:11], grouping = two.df[, 12], prior=c(1,1)/2)
two.qdap <- predict(two.qda, two.df[, 1:11])
# Переводит данные в стандартизированный формат. Первый параметр - предсказания, второй - настоящая классификация.
preds <- prediction(two.qdap$posterior[,2], two.df[, 12])
# Строим ROC-кривую и рисуем ее
perf <- performance(preds, "tpr", "fpr")
plot(perf, colorize = TRUE)
#Считаем AUC
AUC.ROCR <- performance(preds, "auc")
# Добавляем прямую
abline(a = 0, b = 1)
# Добавляем значение AUC на график
text(x = .25, y = .65, paste("AUC = ", round(AUC.ROCR@y.values[[1]],5)))
# two.df = Subset(df_l, quality != 2)
# two.cv.qda <- qda(two.df[, 1:11], two.df[, 12], CV = T, prior=c(1,1)/2)
# predcv <- prediction(two.cv.qda$posterior[,2], two.df[, 12])
# perfcv <- performance(predcv, "tpr", "fpr")
# plot(perfcv, colorize = TRUE)
# AUCcv <- performance(predcv, "auc")
# abline(a = 0, b = 1)
# text(x = .25, y = .65, paste("AUC = ", round(AUCcv@y.values[[1]],5)))
df_l <- df
df_l <- transform(df_l, residual.sugar=log(residual.sugar))
df_l <- transform(df_l, chlorides=log(chlorides))
df_l <- transform(df_l, citric.acid=log(citric.acid))
df_l <- transform(df_l, volatile.acidity=log(volatile.acidity))
df_l <- transform(df_l, free.sulfur.dioxide=log(free.sulfur.dioxide))
df_l <- transform(df_l, sulphates=log(sulphates))
df_l <- transform(df_l, density=log(density))
chart.Correlation(subset(df_l), histogram=TRUE)
df_l <- df
df_l <- transform(df_l, residual.sugar=log(residual.sugar))
df_l <- transform(df_l, chlorides=log(chlorides))
df_l <- transform(df_l, citric.acid=log(citric.acid))
df_l <- transform(df_l, volatile.acidity=log(volatile.acidity))
df_l <- transform(df_l, free.sulfur.dioxide=log(free.sulfur.dioxide))
df_l <- transform(df_l, sulphates=log(sulphates))
df_l <- transform(df_l, density=log(density))
chart.Correlation(subset(df_l, select=-c(quality)), histogram=TRUE)
df_l <- df_l %>% filter(!is.infinite(citric.acid))
